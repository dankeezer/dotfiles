#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author username?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_homebrew_first () {
  sh -c 'homebrew/homebrew.sh'
}

check_macos_prereqs () {
  echo "Before we get started..."
  read -p "Are you running the most recent macOS version? [y/N]" -n 1 -r
  echo
  if ! [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo
    echo "It's recommended you update macOS before running this."
    read -p "Do you want to continue this installation using your current macOS version? [y/N]" -n 1 -r
    echo
    if ! [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo
      echo "Bye! I'll open the App Store..."
      sleep 1
      open -a App\ Store
      exit 0
    fi
  fi

  read -p "Are you logged into the App Store? [y/N]" -n 1 -r
  echo
  if ! [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo
    echo "It's recommended you log into the App Store before running this."
    read -p "Do you want to continue this installation without logging into the App Store? [y/N]" -n 1 -r
    echo
    if ! [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo
      echo "Bye! I'll open the App Store..."
      sleep 1
      open -a App\ Store
      exit 0
    fi
  fi

  read -p "Have you added private-env.sh into ~/.dotfiles? [y/N]" -n 1 -r
  echo
  if ! [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo
    echo "If you have a private-env.sh it's recommended you add it now."
    read -p "Do you want to continue this installation without private-env.sh? [y/N]" -n 1 -r
    echo
    if ! [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo "Bye!"
      exit 0
    fi
  fi
  echo
  echo "Continuing installation..."
}

check_macos_prereqs
install_homebrew_first
setup_gitconfig
install_dotfiles

# find the installers and run them iteratively
for installer in $(find . -name '*install.sh'); do
  sh -c "${installer}"
  success "${installer}"
done

# run private-env.sh last
if [ -f ./private-env.sh ]
then
  ./private-env.sh
  success "./private-env.sh"
fi

echo ''
echo '  All installed!'
